// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: logger.proto

package confpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterLevel *int32 `protobuf:"varint,1,opt,name=filter_level,json=filterLevel,proto3,oneof" json:"filter_level,omitempty"`
	// Types that are assignable to Setting:
	//
	//	*Log_Zap
	//	*Log_Fluent
	//	*Log_Aliyun
	//	*Log_Logrus
	Setting isLog_Setting `protobuf_oneof:"setting"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{0}
}

func (x *Log) GetFilterLevel() int32 {
	if x != nil && x.FilterLevel != nil {
		return *x.FilterLevel
	}
	return 0
}

func (m *Log) GetSetting() isLog_Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (x *Log) GetZap() *ZapLog {
	if x, ok := x.GetSetting().(*Log_Zap); ok {
		return x.Zap
	}
	return nil
}

func (x *Log) GetFluent() *FluentLog {
	if x, ok := x.GetSetting().(*Log_Fluent); ok {
		return x.Fluent
	}
	return nil
}

func (x *Log) GetAliyun() *AliyunLog {
	if x, ok := x.GetSetting().(*Log_Aliyun); ok {
		return x.Aliyun
	}
	return nil
}

func (x *Log) GetLogrus() *LogrusLog {
	if x, ok := x.GetSetting().(*Log_Logrus); ok {
		return x.Logrus
	}
	return nil
}

type isLog_Setting interface {
	isLog_Setting()
}

type Log_Zap struct {
	Zap *ZapLog `protobuf:"bytes,2,opt,name=zap,proto3,oneof"`
}

type Log_Fluent struct {
	Fluent *FluentLog `protobuf:"bytes,3,opt,name=fluent,proto3,oneof"`
}

type Log_Aliyun struct {
	Aliyun *AliyunLog `protobuf:"bytes,4,opt,name=aliyun,proto3,oneof"`
}

type Log_Logrus struct {
	Logrus *LogrusLog `protobuf:"bytes,5,opt,name=logrus,proto3,oneof"`
}

func (*Log_Zap) isLog_Setting() {}

func (*Log_Fluent) isLog_Setting() {}

func (*Log_Aliyun) isLog_Setting() {}

func (*Log_Logrus) isLog_Setting() {}

type ZapLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// json | text
	Formatter string     `protobuf:"bytes,1,opt,name=formatter,proto3" json:"formatter,omitempty"`
	Kafka     *KafkaHook `protobuf:"bytes,2,opt,name=kafka,proto3" json:"kafka,omitempty"`
	File      *FileHook  `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *ZapLog) Reset() {
	*x = ZapLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZapLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZapLog) ProtoMessage() {}

func (x *ZapLog) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZapLog.ProtoReflect.Descriptor instead.
func (*ZapLog) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{1}
}

func (x *ZapLog) GetFormatter() string {
	if x != nil {
		return x.Formatter
	}
	return ""
}

func (x *ZapLog) GetKafka() *KafkaHook {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *ZapLog) GetFile() *FileHook {
	if x != nil {
		return x.File
	}
	return nil
}

type LogrusLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// json | text
	Formatter string     `protobuf:"bytes,1,opt,name=formatter,proto3" json:"formatter,omitempty"`
	Kafka     *KafkaHook `protobuf:"bytes,2,opt,name=kafka,proto3" json:"kafka,omitempty"`
	File      *FileHook  `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *LogrusLog) Reset() {
	*x = LogrusLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogrusLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogrusLog) ProtoMessage() {}

func (x *LogrusLog) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogrusLog.ProtoReflect.Descriptor instead.
func (*LogrusLog) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{2}
}

func (x *LogrusLog) GetFormatter() string {
	if x != nil {
		return x.Formatter
	}
	return ""
}

func (x *LogrusLog) GetKafka() *KafkaHook {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *LogrusLog) GetFile() *FileHook {
	if x != nil {
		return x.File
	}
	return nil
}

type KafkaHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Brokers      []string `protobuf:"bytes,2,rep,name=brokers,proto3" json:"brokers,omitempty"`
	DefaultTopic string   `protobuf:"bytes,3,opt,name=default_topic,json=defaultTopic,proto3" json:"default_topic,omitempty"`
}

func (x *KafkaHook) Reset() {
	*x = KafkaHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaHook) ProtoMessage() {}

func (x *KafkaHook) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaHook.ProtoReflect.Descriptor instead.
func (*KafkaHook) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaHook) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KafkaHook) GetBrokers() []string {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *KafkaHook) GetDefaultTopic() string {
	if x != nil {
		return x.DefaultTopic
	}
	return ""
}

type FileHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string               `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Filename     string               `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	MaxAge       *durationpb.Duration `protobuf:"bytes,3,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	RotationTime *durationpb.Duration `protobuf:"bytes,4,opt,name=rotation_time,json=rotationTime,proto3" json:"rotation_time,omitempty"`
	// %Y%m%d
	Pattern string `protobuf:"bytes,5,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *FileHook) Reset() {
	*x = FileHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileHook) ProtoMessage() {}

func (x *FileHook) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileHook.ProtoReflect.Descriptor instead.
func (*FileHook) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{4}
}

func (x *FileHook) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileHook) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileHook) GetMaxAge() *durationpb.Duration {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *FileHook) GetRotationTime() *durationpb.Duration {
	if x != nil {
		return x.RotationTime
	}
	return nil
}

func (x *FileHook) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type FluentLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr               string               `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Timeout            *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	WriteTimeout       *durationpb.Duration `protobuf:"bytes,3,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`
	BufferLimit        int64                `protobuf:"varint,4,opt,name=buffer_limit,json=bufferLimit,proto3" json:"buffer_limit,omitempty"`
	RetryWait          int64                `protobuf:"varint,5,opt,name=retry_wait,json=retryWait,proto3" json:"retry_wait,omitempty"`
	MaxRetry           int64                `protobuf:"varint,6,opt,name=max_retry,json=maxRetry,proto3" json:"max_retry,omitempty"`
	MaxRetryWait       int64                `protobuf:"varint,7,opt,name=maxRetry_wait,json=maxRetryWait,proto3" json:"maxRetry_wait,omitempty"`
	TagPrefix          string               `protobuf:"bytes,8,opt,name=tag_prefix,json=tagPrefix,proto3" json:"tag_prefix,omitempty"`
	Async              bool                 `protobuf:"varint,9,opt,name=async,proto3" json:"async,omitempty"`
	ForceStopAsyncSend bool                 `protobuf:"varint,10,opt,name=force_stop_async_send,json=forceStopAsyncSend,proto3" json:"force_stop_async_send,omitempty"`
}

func (x *FluentLog) Reset() {
	*x = FluentLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluentLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluentLog) ProtoMessage() {}

func (x *FluentLog) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluentLog.ProtoReflect.Descriptor instead.
func (*FluentLog) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{5}
}

func (x *FluentLog) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *FluentLog) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *FluentLog) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *FluentLog) GetBufferLimit() int64 {
	if x != nil {
		return x.BufferLimit
	}
	return 0
}

func (x *FluentLog) GetRetryWait() int64 {
	if x != nil {
		return x.RetryWait
	}
	return 0
}

func (x *FluentLog) GetMaxRetry() int64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *FluentLog) GetMaxRetryWait() int64 {
	if x != nil {
		return x.MaxRetryWait
	}
	return 0
}

func (x *FluentLog) GetTagPrefix() string {
	if x != nil {
		return x.TagPrefix
	}
	return ""
}

func (x *FluentLog) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

func (x *FluentLog) GetForceStopAsyncSend() bool {
	if x != nil {
		return x.ForceStopAsyncSend
	}
	return false
}

type AliyunLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey    string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	AccessSecret string `protobuf:"bytes,2,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	Endpoint     string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Project      string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	Logstore     string `protobuf:"bytes,5,opt,name=logstore,proto3" json:"logstore,omitempty"`
}

func (x *AliyunLog) Reset() {
	*x = AliyunLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AliyunLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AliyunLog) ProtoMessage() {}

func (x *AliyunLog) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AliyunLog.ProtoReflect.Descriptor instead.
func (*AliyunLog) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{6}
}

func (x *AliyunLog) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *AliyunLog) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *AliyunLog) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AliyunLog) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *AliyunLog) GetLogstore() string {
	if x != nil {
		return x.Logstore
	}
	return ""
}

var File_logger_proto protoreflect.FileDescriptor

var file_logger_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x02, 0x0a, 0x03,
	0x4c, 0x6f, 0x67, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x03, 0x7a,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x5a, 0x61, 0x70, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52,
	0x03, 0x7a, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x2e, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x41, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x6c, 0x69, 0x79, 0x75, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x72,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x4c, 0x6f, 0x67, 0x72, 0x75, 0x73, 0x4c, 0x6f, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x72, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x7f, 0x0a, 0x06, 0x5a, 0x61, 0x70, 0x4c, 0x6f, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x29, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x72, 0x61,
	0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x72,
	0x75, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x12, 0x29, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x09,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xc8, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x22, 0x80, 0x03, 0x0a, 0x09, 0x46, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x53, 0x65, 0x6e, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x69, 0x79, 0x75,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x65, 0x73, 0x6f, 0x70, 0x65, 0x72,
	0x31, 0x30, 0x31, 0x2f, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x70, 0x62, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logger_proto_rawDescOnce sync.Once
	file_logger_proto_rawDescData = file_logger_proto_rawDesc
)

func file_logger_proto_rawDescGZIP() []byte {
	file_logger_proto_rawDescOnce.Do(func() {
		file_logger_proto_rawDescData = protoimpl.X.CompressGZIP(file_logger_proto_rawDescData)
	})
	return file_logger_proto_rawDescData
}

var file_logger_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_logger_proto_goTypes = []interface{}{
	(*Log)(nil),                 // 0: kratos.conf.Log
	(*ZapLog)(nil),              // 1: kratos.conf.ZapLog
	(*LogrusLog)(nil),           // 2: kratos.conf.LogrusLog
	(*KafkaHook)(nil),           // 3: kratos.conf.KafkaHook
	(*FileHook)(nil),            // 4: kratos.conf.FileHook
	(*FluentLog)(nil),           // 5: kratos.conf.FluentLog
	(*AliyunLog)(nil),           // 6: kratos.conf.AliyunLog
	(*durationpb.Duration)(nil), // 7: google.protobuf.Duration
}
var file_logger_proto_depIdxs = []int32{
	1,  // 0: kratos.conf.Log.zap:type_name -> kratos.conf.ZapLog
	5,  // 1: kratos.conf.Log.fluent:type_name -> kratos.conf.FluentLog
	6,  // 2: kratos.conf.Log.aliyun:type_name -> kratos.conf.AliyunLog
	2,  // 3: kratos.conf.Log.logrus:type_name -> kratos.conf.LogrusLog
	3,  // 4: kratos.conf.ZapLog.kafka:type_name -> kratos.conf.KafkaHook
	4,  // 5: kratos.conf.ZapLog.file:type_name -> kratos.conf.FileHook
	3,  // 6: kratos.conf.LogrusLog.kafka:type_name -> kratos.conf.KafkaHook
	4,  // 7: kratos.conf.LogrusLog.file:type_name -> kratos.conf.FileHook
	7,  // 8: kratos.conf.FileHook.max_age:type_name -> google.protobuf.Duration
	7,  // 9: kratos.conf.FileHook.rotation_time:type_name -> google.protobuf.Duration
	7,  // 10: kratos.conf.FluentLog.timeout:type_name -> google.protobuf.Duration
	7,  // 11: kratos.conf.FluentLog.write_timeout:type_name -> google.protobuf.Duration
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_logger_proto_init() }
func file_logger_proto_init() {
	if File_logger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZapLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogrusLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluentLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AliyunLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_logger_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Log_Zap)(nil),
		(*Log_Fluent)(nil),
		(*Log_Aliyun)(nil),
		(*Log_Logrus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logger_proto_goTypes,
		DependencyIndexes: file_logger_proto_depIdxs,
		MessageInfos:      file_logger_proto_msgTypes,
	}.Build()
	File_logger_proto = out.File
	file_logger_proto_rawDesc = nil
	file_logger_proto_goTypes = nil
	file_logger_proto_depIdxs = nil
}
